cmake_minimum_required(VERSION 2.8)
project(IGLFramework)

set(CMAKE_CXX_STANDARD 11)

# Compile type: Release, Debug, RelWithDebInfo
set(CMAKE_BUILD_TYPE RelWithDebInfo)

# Where external libraries are
set(THIRD_PARTY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty)

# definitions
#add_definitions(-DIGL_VIEWER_WITH_NANOGUI -DNANOVG_GL3_IMPLEMENTATION)
add_definitions(-DIGL_VIEWER_WITH_NANOGUI)

# ################################################################ #
# IGL
# ################################################################ #

include_directories(${THIRD_PARTY_DIR}/libigl/include)

#include_directories(${THIRD_PARTY_DIR}/libigl/install/include)
#link_directories(${THIRD_PARTY_DIR}/libigl/lib)

# ################################################################ #
# NanoGui
# ################################################################ #

# Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)
#set(NANOGUI_USE_GLAD OFF CACHE BOOL " " FORCE)
#set(NANOGUI_USE_GLAD_DEFAULT OFF CACHE BOOL " " FORCE)

# Add the configurations from nanogui
add_subdirectory(${THIRD_PARTY_DIR}/libigl/external/nanogui)
if (NOT WIN32)
	set_target_properties(nanogui-obj PROPERTIES COMPILE_FLAGS -Wno-deprecated-declarations)
	set_target_properties(nanogui PROPERTIES COMPILE_FLAGS -Wno-deprecated-declarations)
endif()

include_directories(${THIRD_PARTY_DIR}/libigl/external/nanogui/include)

# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})
MESSAGE(STATUS "NANOGUI_EXTRA_DEFS ${NANOGUI_EXTRA_DEFS}")
# prints: -DNANOGUI_SHARED;-DNVG_SHARED;-DGLAD_GLAPI_EXPORT

# On top of adding the path to nanogui/include, you may need extras
include_directories(${NANOGUI_EXTRA_INCS})
MESSAGE(STATUS "NANOGUI_EXTRA_INCS: ${NANOGUI_EXTRA_INCS}")
# prints: \
#  3rdparty/libigl/external/nanogui/ext/glfw/include; \
#  3rdparty/libigl/external/nanogui/ext/nanovg/src; \
#  3rdparty/libigl/external/nanogui/ext/eigen

MESSAGE(STATUS "NANOGUI_EXTRA_LIBS: ${NANOGUI_EXTRA_LIBS}")
# prints: GL;Xxf86vm;Xrandr;Xinerama;Xcursor;Xi;X11;pthread;rt;dl

# ################################################################ #
# Eigen
# ################################################################ #

if (DEFINED Eigen3_DIR)
    # use system version
    set(Eigen3_DIR ${THIRD_PARTY_DIR}/eigen)
    MESSAGE(STATUS "Eigen3_DIR: ${Eigen3_DIR}")
    find_package(Eigen3 REQUIRED HINTS ${Eigen3_DIR})
else()
    # use libigl's version
    set(EIGEN3_INCLUDE_DIR ${THIRD_PARTY_DIR}/libigl/external/nanogui/ext/eigen)
endif()
include_directories(${EIGEN3_INCLUDE_DIR})
MESSAGE(STATUS "EIGEN3_INCLUDE_DIR: ${EIGEN3_INCLUDE_DIR}")

# ################################################################ #
# NanoFLANN
# ################################################################ #
include_directories(${THIRD_PARTY_DIR}/nanoflann/include)

# ################################################################ #
# GLEW
# ################################################################ #

#if (WIN32)
#    set(GLEW_DIR "${THIRD_PARTY_DIR}/glew-2.0.0")
#    if (NOT EXISTS GLEW_DIR)
#    	MESSAGE(FATAL Glew directory does not exist: ${GLEW_DIR})
#    endif()
#    set(GLEW_LIBRARIES "glew32s")
#    set(GLEW_INCLUDE_DIRS "${GLEW_DIR}/include")
#    link_libraries(${GLEW_DIR}/lib/Release/x64)
#else()
if (NOT WIN32)
	set(GLEW_STATIC)
	find_package(GLEW REQUIRED)
	if (NOT DEFINED GLEW_LIBRARIES)
		MESSAGE(FATAL "GLEW LIBRARIES variable not filled...")
	endif()
endif()
include_directories(${GLEW_INCLUDE_DIRS})

# ################################################################ #
# Project
# ################################################################ #

include_directories(include)

# List of source files
set(SOURCE_FILES
    	include/acq/typedefs.h
    	include/acq/normalEstimation.h
    	include/acq/impl/normalEstimation.hpp
		include/acq/ransac.h
		include/acq/impl/ransac.hpp
		include/acq/gestion.h
		include/acq/impl/gestion.hpp
		include/acq/cloudPrimitive.h
		include/acq/impl/cloudPrimitive.hpp
		include/acq/primitive.h
		include/acq/impl/primitive.hpp
		include/acq/cloudManager.h
		include/acq/impl/cloudManager.hpp
    	include/acq/decoratedCloud.h
    	include/acq/impl/decoratedCloud.hpp
		src/gestion.cpp
		src/ransac.cpp
		src/cloudPrimitive.cpp
		src/plane.cpp
		src/sphere.cpp
    src/normalEstimation.cpp
    src/decoratedCloud.cpp
    src/cloudManager.cpp
    src/main.cpp
)

# Create program
add_executable(iglFramework ${SOURCE_FILES})

# Add defines
target_compile_definitions(iglFramework PUBLIC -DNANOVG_GL3_IMPLEMENTATION)
if (WIN32)
	target_compile_definitions(iglFramework PUBLIC -DGLFW_INCLUDE_NONE -DNDEBUG -D_CONSOLE -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -DGLEW_STATIC)
endif()

if (NOT WIN32)
	set_target_properties(iglFramework PROPERTIES COMPILE_FLAGS -Wno-deprecated-declarations)
endif()

# Link dependency libraries
target_link_libraries(iglFramework
	nanogui
	${NANOGUI_EXTRA_LIBS}
	${GLEW_LIBRARIES}
)

if (WIN32)
	add_custom_command(TARGET iglFramework POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E
	copy_if_different "${CMAKE_CURRENT_BINARY_DIR}/3rdparty/libigl/external/nanogui/${CMAKE_BUILD_TYPE}/nanogui.dll"
	$<TARGET_FILE_DIR:iglFramework>/nanogui.dll)
endif()

# Untested!
# Optional to compile IGL: http://libigl.github.io/libigl/optional/
# cd libigl
# mkdir lib
# cd lib
# cmake -DCMAKE_BUILD_TYPE=Release -DLIBIGL_WITH_NANOGUI=YES -DLIBIGL_WITH_ANTTWEAKBAR=NO -DLIBIGL_WITH_CGAL=NO ../optional
